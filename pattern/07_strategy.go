package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
	Стратегия - это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов
	и помещает каждый из них в собственный класс,
	после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.

Использование:
	1) когда нужно использовать разные вариации какого-то алгоритма внутри одного объекта
	2) когда у вас есть множество похожих классов, отличающихся только некоторым поведением
	3) когда не нужно обнажать детали реализации алгоритмов для других классов
	4) когда различные вариации алгоритмов реализованы в виде развесистого условного оператора.
	каждая ветка такого оператора представляет собой вариацию алгоритма

	+:
	1) горячая замена алгоритмов на лету
	2) изолирует код и данные алгоритмов от остальных классов
	3) уход от наследования к делегированию
	4) реализует принцип открытости/закрытости

	-:
	1) усложняет программу за счет дополнительных классов
	2) клиент должен знать, в чем состоит разница между стратегиями, чтобы выбрать подходящую
*/

type Context struct {
	strategy func() bool
}

func (c *Context) Execute() {
	c.strategy()
}

func (c *Context) SetStrategy(strategy func() bool) {
	c.strategy = strategy
}

func TrueStrategy() bool {
	return true
}

func FalseStrategy() bool {
	return false
}

// func main() {
// 	newContext := Context{}
// 	trueStrategy := TrueStrategy
// 	newContext.SetStrategy(trueStrategy)
// 	newContext.Execute()

// 	falseStrategy := FalseStrategy
// 	newContext.SetStrategy(falseStrategy)
// 	newContext.Execute()
// }
